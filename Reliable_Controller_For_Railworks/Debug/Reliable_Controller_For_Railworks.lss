
Reliable_Controller_For_Railworks.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000628  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000628  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000af8  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d4d  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  78:	0c 94 12 03 	jmp	0x624	; 0x624 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <error>:
#include <util/delay.h>

#define EEPROM_KB 1			//depending on mcu used
#define WAIT 100

void error(){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	exit(1);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 12 03 	call	0x624	; 0x624 <_exit>

00000090 <pattern_test>:
}

void pattern_test(uint16_t pattern) {
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	62 97       	sbiw	r28, 0x12	; 18
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	f8 94       	cli
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	9a 8b       	std	Y+18, r25	; 0x12
  a6:	89 8b       	std	Y+17, r24	; 0x11

	uint16_t* ptr = 0;
  a8:	1a 82       	std	Y+2, r1	; 0x02
  aa:	19 82       	std	Y+1, r1	; 0x01
	//using 16bits or 2bytes
	for(ptr = (uint16_t*)0x0000; ptr <= (uint16_t*)(EEPROM_KB*512); ptr += 2){
  ac:	1a 82       	std	Y+2, r1	; 0x02
  ae:	19 82       	std	Y+1, r1	; 0x01
  b0:	16 c0       	rjmp	.+44     	; 0xde <pattern_test+0x4e>
		eeprom_busy_wait();
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	80 81       	ld	r24, Z
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 70       	andi	r24, 0x02	; 2
  c0:	99 27       	eor	r25, r25
  c2:	89 2b       	or	r24, r25
  c4:	b1 f7       	brne	.-20     	; 0xb2 <pattern_test+0x22>
		//wait for eeprom to be ready
		eeprom_write_word(ptr, pattern);
  c6:	29 89       	ldd	r18, Y+17	; 0x11
  c8:	3a 89       	ldd	r19, Y+18	; 0x12
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	9a 81       	ldd	r25, Y+2	; 0x02
  ce:	b9 01       	movw	r22, r18
  d0:	0e 94 ef 02 	call	0x5de	; 0x5de <eeprom_write_word>

void pattern_test(uint16_t pattern) {

	uint16_t* ptr = 0;
	//using 16bits or 2bytes
	for(ptr = (uint16_t*)0x0000; ptr <= (uint16_t*)(EEPROM_KB*512); ptr += 2){
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	04 96       	adiw	r24, 0x04	; 4
  da:	9a 83       	std	Y+2, r25	; 0x02
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	9a 81       	ldd	r25, Y+2	; 0x02
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	92 40       	sbci	r25, 0x02	; 2
  e6:	28 f3       	brcs	.-54     	; 0xb2 <pattern_test+0x22>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	a8 ec       	ldi	r26, 0xC8	; 200
  ee:	b2 e4       	ldi	r27, 0x42	; 66
  f0:	8b 83       	std	Y+3, r24	; 0x03
  f2:	9c 83       	std	Y+4, r25	; 0x04
  f4:	ad 83       	std	Y+5, r26	; 0x05
  f6:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	4a e7       	ldi	r20, 0x7A	; 122
  fe:	55 e4       	ldi	r21, 0x45	; 69
 100:	6b 81       	ldd	r22, Y+3	; 0x03
 102:	7c 81       	ldd	r23, Y+4	; 0x04
 104:	8d 81       	ldd	r24, Y+5	; 0x05
 106:	9e 81       	ldd	r25, Y+6	; 0x06
 108:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__mulsf3>
 10c:	dc 01       	movw	r26, r24
 10e:	cb 01       	movw	r24, r22
 110:	8f 83       	std	Y+7, r24	; 0x07
 112:	98 87       	std	Y+8, r25	; 0x08
 114:	a9 87       	std	Y+9, r26	; 0x09
 116:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	40 e8       	ldi	r20, 0x80	; 128
 11e:	5f e3       	ldi	r21, 0x3F	; 63
 120:	6f 81       	ldd	r22, Y+7	; 0x07
 122:	78 85       	ldd	r23, Y+8	; 0x08
 124:	89 85       	ldd	r24, Y+9	; 0x09
 126:	9a 85       	ldd	r25, Y+10	; 0x0a
 128:	0e 94 ce 01 	call	0x39c	; 0x39c <__cmpsf2>
 12c:	88 23       	and	r24, r24
 12e:	2c f4       	brge	.+10     	; 0x13a <pattern_test+0xaa>
		__ticks = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	9c 87       	std	Y+12, r25	; 0x0c
 136:	8b 87       	std	Y+11, r24	; 0x0b
 138:	3f c0       	rjmp	.+126    	; 0x1b8 <pattern_test+0x128>
	else if (__tmp > 65535)
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	3f ef       	ldi	r19, 0xFF	; 255
 13e:	4f e7       	ldi	r20, 0x7F	; 127
 140:	57 e4       	ldi	r21, 0x47	; 71
 142:	6f 81       	ldd	r22, Y+7	; 0x07
 144:	78 85       	ldd	r23, Y+8	; 0x08
 146:	89 85       	ldd	r24, Y+9	; 0x09
 148:	9a 85       	ldd	r25, Y+10	; 0x0a
 14a:	0e 94 4f 02 	call	0x49e	; 0x49e <__gesf2>
 14e:	18 16       	cp	r1, r24
 150:	4c f5       	brge	.+82     	; 0x1a4 <pattern_test+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e2       	ldi	r20, 0x20	; 32
 158:	51 e4       	ldi	r21, 0x41	; 65
 15a:	6b 81       	ldd	r22, Y+3	; 0x03
 15c:	7c 81       	ldd	r23, Y+4	; 0x04
 15e:	8d 81       	ldd	r24, Y+5	; 0x05
 160:	9e 81       	ldd	r25, Y+6	; 0x06
 162:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__mulsf3>
 166:	dc 01       	movw	r26, r24
 168:	cb 01       	movw	r24, r22
 16a:	bc 01       	movw	r22, r24
 16c:	cd 01       	movw	r24, r26
 16e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fixunssfsi>
 172:	dc 01       	movw	r26, r24
 174:	cb 01       	movw	r24, r22
 176:	9c 87       	std	Y+12, r25	; 0x0c
 178:	8b 87       	std	Y+11, r24	; 0x0b
 17a:	0f c0       	rjmp	.+30     	; 0x19a <pattern_test+0x10a>
 17c:	80 e9       	ldi	r24, 0x90	; 144
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	9e 87       	std	Y+14, r25	; 0x0e
 182:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 184:	8d 85       	ldd	r24, Y+13	; 0x0d
 186:	9e 85       	ldd	r25, Y+14	; 0x0e
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <pattern_test+0xf8>
 18c:	9e 87       	std	Y+14, r25	; 0x0e
 18e:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 190:	8b 85       	ldd	r24, Y+11	; 0x0b
 192:	9c 85       	ldd	r25, Y+12	; 0x0c
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	9c 87       	std	Y+12, r25	; 0x0c
 198:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19a:	8b 85       	ldd	r24, Y+11	; 0x0b
 19c:	9c 85       	ldd	r25, Y+12	; 0x0c
 19e:	89 2b       	or	r24, r25
 1a0:	69 f7       	brne	.-38     	; 0x17c <pattern_test+0xec>
 1a2:	14 c0       	rjmp	.+40     	; 0x1cc <pattern_test+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1a4:	6f 81       	ldd	r22, Y+7	; 0x07
 1a6:	78 85       	ldd	r23, Y+8	; 0x08
 1a8:	89 85       	ldd	r24, Y+9	; 0x09
 1aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ac:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fixunssfsi>
 1b0:	dc 01       	movw	r26, r24
 1b2:	cb 01       	movw	r24, r22
 1b4:	9c 87       	std	Y+12, r25	; 0x0c
 1b6:	8b 87       	std	Y+11, r24	; 0x0b
 1b8:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ba:	9c 85       	ldd	r25, Y+12	; 0x0c
 1bc:	98 8b       	std	Y+16, r25	; 0x10
 1be:	8f 87       	std	Y+15, r24	; 0x0f
 1c0:	8f 85       	ldd	r24, Y+15	; 0x0f
 1c2:	98 89       	ldd	r25, Y+16	; 0x10
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <pattern_test+0x134>
 1c8:	98 8b       	std	Y+16, r25	; 0x10
 1ca:	8f 87       	std	Y+15, r24	; 0x0f
		//wait for eeprom to be ready
		eeprom_write_word(ptr, pattern);
		//write a given pattern
	}
	_delay_ms(WAIT);
	for(ptr = (uint16_t*)0x0000; ptr <= (uint16_t*)(EEPROM_KB*512); ptr += 2){
 1cc:	1a 82       	std	Y+2, r1	; 0x02
 1ce:	19 82       	std	Y+1, r1	; 0x01
 1d0:	1b c0       	rjmp	.+54     	; 0x208 <pattern_test+0x178>
		eeprom_busy_wait();
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	82 70       	andi	r24, 0x02	; 2
 1e0:	99 27       	eor	r25, r25
 1e2:	89 2b       	or	r24, r25
 1e4:	b1 f7       	brne	.-20     	; 0x1d2 <pattern_test+0x142>
		if(eeprom_read_word(ptr) != pattern) {
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ea:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <eeprom_read_word>
 1ee:	9c 01       	movw	r18, r24
 1f0:	89 89       	ldd	r24, Y+17	; 0x11
 1f2:	9a 89       	ldd	r25, Y+18	; 0x12
 1f4:	28 17       	cp	r18, r24
 1f6:	39 07       	cpc	r19, r25
 1f8:	11 f0       	breq	.+4      	; 0x1fe <pattern_test+0x16e>
			error();
 1fa:	0e 94 40 00 	call	0x80	; 0x80 <error>
		//wait for eeprom to be ready
		eeprom_write_word(ptr, pattern);
		//write a given pattern
	}
	_delay_ms(WAIT);
	for(ptr = (uint16_t*)0x0000; ptr <= (uint16_t*)(EEPROM_KB*512); ptr += 2){
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	9a 81       	ldd	r25, Y+2	; 0x02
 202:	04 96       	adiw	r24, 0x04	; 4
 204:	9a 83       	std	Y+2, r25	; 0x02
 206:	89 83       	std	Y+1, r24	; 0x01
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	92 40       	sbci	r25, 0x02	; 2
 210:	00 f3       	brcs	.-64     	; 0x1d2 <pattern_test+0x142>
		if(eeprom_read_word(ptr) != pattern) {
			error();
		}
		//check if a given pattern is at correct memory location
	}
}
 212:	62 96       	adiw	r28, 0x12	; 18
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <eeprom_test>:

void eeprom_test(void) {
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	pattern_test(0xFFFF);
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	0e 94 48 00 	call	0x90	; 0x90 <pattern_test>
	pattern_test(0xAAAA);
 234:	8a ea       	ldi	r24, 0xAA	; 170
 236:	9a ea       	ldi	r25, 0xAA	; 170
 238:	0e 94 48 00 	call	0x90	; 0x90 <pattern_test>
	pattern_test(0x5555);
 23c:	85 e5       	ldi	r24, 0x55	; 85
 23e:	95 e5       	ldi	r25, 0x55	; 85
 240:	0e 94 48 00 	call	0x90	; 0x90 <pattern_test>
	pattern_test(0x0000);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 48 00 	call	0x90	; 0x90 <pattern_test>
	//check memory using typical patterns,
	//using all the patterns possible would take too much time
	exit(0);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 12 03 	call	0x624	; 0x624 <_exit>

00000254 <main>:

#define LED_BIT PB5
#define LED_HIGH PORTB |= _BV(LED_BIT)
#define LED_LOW PORTB &= ~(_BV(LED_BIT))

int main(void) {
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	2f 97       	sbiw	r28, 0x0f	; 15
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	de bf       	out	0x3e, r29	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	cd bf       	out	0x3d, r28	; 61
/* this is Sparta */
	uint8_t led_state = 1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 83       	std	Y+1, r24	; 0x01
	DDRB |= (1 << LED_BIT);
 26c:	84 e2       	ldi	r24, 0x24	; 36
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	24 e2       	ldi	r18, 0x24	; 36
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	20 62       	ori	r18, 0x20	; 32
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18

	while (1) {
		if (led_state)
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	88 23       	and	r24, r24
 282:	51 f0       	breq	.+20     	; 0x298 <main+0x44>
			LED_HIGH;
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	25 e2       	ldi	r18, 0x25	; 37
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	20 81       	ld	r18, Z
 290:	20 62       	ori	r18, 0x20	; 32
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
 296:	09 c0       	rjmp	.+18     	; 0x2aa <main+0x56>
		else
			LED_LOW;
 298:	85 e2       	ldi	r24, 0x25	; 37
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	25 e2       	ldi	r18, 0x25	; 37
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	2f 7d       	andi	r18, 0xDF	; 223
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18

		led_state = !led_state;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	99 81       	ldd	r25, Y+1	; 0x01
 2ae:	99 23       	and	r25, r25
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <main+0x60>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	aa e7       	ldi	r26, 0x7A	; 122
 2bc:	b4 e4       	ldi	r27, 0x44	; 68
 2be:	8a 83       	std	Y+2, r24	; 0x02
 2c0:	9b 83       	std	Y+3, r25	; 0x03
 2c2:	ac 83       	std	Y+4, r26	; 0x04
 2c4:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	4a e7       	ldi	r20, 0x7A	; 122
 2cc:	55 e4       	ldi	r21, 0x45	; 69
 2ce:	6a 81       	ldd	r22, Y+2	; 0x02
 2d0:	7b 81       	ldd	r23, Y+3	; 0x03
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__mulsf3>
 2da:	dc 01       	movw	r26, r24
 2dc:	cb 01       	movw	r24, r22
 2de:	8e 83       	std	Y+6, r24	; 0x06
 2e0:	9f 83       	std	Y+7, r25	; 0x07
 2e2:	a8 87       	std	Y+8, r26	; 0x08
 2e4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e8       	ldi	r20, 0x80	; 128
 2ec:	5f e3       	ldi	r21, 0x3F	; 63
 2ee:	6e 81       	ldd	r22, Y+6	; 0x06
 2f0:	7f 81       	ldd	r23, Y+7	; 0x07
 2f2:	88 85       	ldd	r24, Y+8	; 0x08
 2f4:	99 85       	ldd	r25, Y+9	; 0x09
 2f6:	0e 94 ce 01 	call	0x39c	; 0x39c <__cmpsf2>
 2fa:	88 23       	and	r24, r24
 2fc:	2c f4       	brge	.+10     	; 0x308 <main+0xb4>
		__ticks = 1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	9b 87       	std	Y+11, r25	; 0x0b
 304:	8a 87       	std	Y+10, r24	; 0x0a
 306:	3f c0       	rjmp	.+126    	; 0x386 <main+0x132>
	else if (__tmp > 65535)
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	3f ef       	ldi	r19, 0xFF	; 255
 30c:	4f e7       	ldi	r20, 0x7F	; 127
 30e:	57 e4       	ldi	r21, 0x47	; 71
 310:	6e 81       	ldd	r22, Y+6	; 0x06
 312:	7f 81       	ldd	r23, Y+7	; 0x07
 314:	88 85       	ldd	r24, Y+8	; 0x08
 316:	99 85       	ldd	r25, Y+9	; 0x09
 318:	0e 94 4f 02 	call	0x49e	; 0x49e <__gesf2>
 31c:	18 16       	cp	r1, r24
 31e:	4c f5       	brge	.+82     	; 0x372 <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	40 e2       	ldi	r20, 0x20	; 32
 326:	51 e4       	ldi	r21, 0x41	; 65
 328:	6a 81       	ldd	r22, Y+2	; 0x02
 32a:	7b 81       	ldd	r23, Y+3	; 0x03
 32c:	8c 81       	ldd	r24, Y+4	; 0x04
 32e:	9d 81       	ldd	r25, Y+5	; 0x05
 330:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__mulsf3>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	bc 01       	movw	r22, r24
 33a:	cd 01       	movw	r24, r26
 33c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fixunssfsi>
 340:	dc 01       	movw	r26, r24
 342:	cb 01       	movw	r24, r22
 344:	9b 87       	std	Y+11, r25	; 0x0b
 346:	8a 87       	std	Y+10, r24	; 0x0a
 348:	0f c0       	rjmp	.+30     	; 0x368 <main+0x114>
 34a:	80 e9       	ldi	r24, 0x90	; 144
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	9d 87       	std	Y+13, r25	; 0x0d
 350:	8c 87       	std	Y+12, r24	; 0x0c
 352:	8c 85       	ldd	r24, Y+12	; 0x0c
 354:	9d 85       	ldd	r25, Y+13	; 0x0d
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x102>
 35a:	9d 87       	std	Y+13, r25	; 0x0d
 35c:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35e:	8a 85       	ldd	r24, Y+10	; 0x0a
 360:	9b 85       	ldd	r25, Y+11	; 0x0b
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	9b 87       	std	Y+11, r25	; 0x0b
 366:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 368:	8a 85       	ldd	r24, Y+10	; 0x0a
 36a:	9b 85       	ldd	r25, Y+11	; 0x0b
 36c:	89 2b       	or	r24, r25
 36e:	69 f7       	brne	.-38     	; 0x34a <main+0xf6>
 370:	14 c0       	rjmp	.+40     	; 0x39a <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 372:	6e 81       	ldd	r22, Y+6	; 0x06
 374:	7f 81       	ldd	r23, Y+7	; 0x07
 376:	88 85       	ldd	r24, Y+8	; 0x08
 378:	99 85       	ldd	r25, Y+9	; 0x09
 37a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__fixunssfsi>
 37e:	dc 01       	movw	r26, r24
 380:	cb 01       	movw	r24, r22
 382:	9b 87       	std	Y+11, r25	; 0x0b
 384:	8a 87       	std	Y+10, r24	; 0x0a
 386:	8a 85       	ldd	r24, Y+10	; 0x0a
 388:	9b 85       	ldd	r25, Y+11	; 0x0b
 38a:	9f 87       	std	Y+15, r25	; 0x0f
 38c:	8e 87       	std	Y+14, r24	; 0x0e
 38e:	8e 85       	ldd	r24, Y+14	; 0x0e
 390:	9f 85       	ldd	r25, Y+15	; 0x0f
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <main+0x13e>
 396:	9f 87       	std	Y+15, r25	; 0x0f
 398:	8e 87       	std	Y+14, r24	; 0x0e
		_delay_ms(1000);
	}
 39a:	71 cf       	rjmp	.-286    	; 0x27e <main+0x2a>

0000039c <__cmpsf2>:
 39c:	0e 94 02 02 	call	0x404	; 0x404 <__fp_cmp>
 3a0:	08 f4       	brcc	.+2      	; 0x3a4 <__cmpsf2+0x8>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret

000003a6 <__fixunssfsi>:
 3a6:	0e 94 2e 02 	call	0x45c	; 0x45c <__fp_splitA>
 3aa:	88 f0       	brcs	.+34     	; 0x3ce <__fixunssfsi+0x28>
 3ac:	9f 57       	subi	r25, 0x7F	; 127
 3ae:	98 f0       	brcs	.+38     	; 0x3d6 <__fixunssfsi+0x30>
 3b0:	b9 2f       	mov	r27, r25
 3b2:	99 27       	eor	r25, r25
 3b4:	b7 51       	subi	r27, 0x17	; 23
 3b6:	b0 f0       	brcs	.+44     	; 0x3e4 <__fixunssfsi+0x3e>
 3b8:	e1 f0       	breq	.+56     	; 0x3f2 <__fixunssfsi+0x4c>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	88 1f       	adc	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	1a f0       	brmi	.+6      	; 0x3ca <__fixunssfsi+0x24>
 3c4:	ba 95       	dec	r27
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <__fixunssfsi+0x14>
 3c8:	14 c0       	rjmp	.+40     	; 0x3f2 <__fixunssfsi+0x4c>
 3ca:	b1 30       	cpi	r27, 0x01	; 1
 3cc:	91 f0       	breq	.+36     	; 0x3f2 <__fixunssfsi+0x4c>
 3ce:	0e 94 48 02 	call	0x490	; 0x490 <__fp_zero>
 3d2:	b1 e0       	ldi	r27, 0x01	; 1
 3d4:	08 95       	ret
 3d6:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_zero>
 3da:	67 2f       	mov	r22, r23
 3dc:	78 2f       	mov	r23, r24
 3de:	88 27       	eor	r24, r24
 3e0:	b8 5f       	subi	r27, 0xF8	; 248
 3e2:	39 f0       	breq	.+14     	; 0x3f2 <__fixunssfsi+0x4c>
 3e4:	b9 3f       	cpi	r27, 0xF9	; 249
 3e6:	cc f3       	brlt	.-14     	; 0x3da <__fixunssfsi+0x34>
 3e8:	86 95       	lsr	r24
 3ea:	77 95       	ror	r23
 3ec:	67 95       	ror	r22
 3ee:	b3 95       	inc	r27
 3f0:	d9 f7       	brne	.-10     	; 0x3e8 <__fixunssfsi+0x42>
 3f2:	3e f4       	brtc	.+14     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 3f4:	90 95       	com	r25
 3f6:	80 95       	com	r24
 3f8:	70 95       	com	r23
 3fa:	61 95       	neg	r22
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	8f 4f       	sbci	r24, 0xFF	; 255
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	08 95       	ret

00000404 <__fp_cmp>:
 404:	99 0f       	add	r25, r25
 406:	00 08       	sbc	r0, r0
 408:	55 0f       	add	r21, r21
 40a:	aa 0b       	sbc	r26, r26
 40c:	e0 e8       	ldi	r30, 0x80	; 128
 40e:	fe ef       	ldi	r31, 0xFE	; 254
 410:	16 16       	cp	r1, r22
 412:	17 06       	cpc	r1, r23
 414:	e8 07       	cpc	r30, r24
 416:	f9 07       	cpc	r31, r25
 418:	c0 f0       	brcs	.+48     	; 0x44a <__fp_cmp+0x46>
 41a:	12 16       	cp	r1, r18
 41c:	13 06       	cpc	r1, r19
 41e:	e4 07       	cpc	r30, r20
 420:	f5 07       	cpc	r31, r21
 422:	98 f0       	brcs	.+38     	; 0x44a <__fp_cmp+0x46>
 424:	62 1b       	sub	r22, r18
 426:	73 0b       	sbc	r23, r19
 428:	84 0b       	sbc	r24, r20
 42a:	95 0b       	sbc	r25, r21
 42c:	39 f4       	brne	.+14     	; 0x43c <__fp_cmp+0x38>
 42e:	0a 26       	eor	r0, r26
 430:	61 f0       	breq	.+24     	; 0x44a <__fp_cmp+0x46>
 432:	23 2b       	or	r18, r19
 434:	24 2b       	or	r18, r20
 436:	25 2b       	or	r18, r21
 438:	21 f4       	brne	.+8      	; 0x442 <__fp_cmp+0x3e>
 43a:	08 95       	ret
 43c:	0a 26       	eor	r0, r26
 43e:	09 f4       	brne	.+2      	; 0x442 <__fp_cmp+0x3e>
 440:	a1 40       	sbci	r26, 0x01	; 1
 442:	a6 95       	lsr	r26
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	81 1d       	adc	r24, r1
 448:	81 1d       	adc	r24, r1
 44a:	08 95       	ret

0000044c <__fp_split3>:
 44c:	57 fd       	sbrc	r21, 7
 44e:	90 58       	subi	r25, 0x80	; 128
 450:	44 0f       	add	r20, r20
 452:	55 1f       	adc	r21, r21
 454:	59 f0       	breq	.+22     	; 0x46c <__fp_splitA+0x10>
 456:	5f 3f       	cpi	r21, 0xFF	; 255
 458:	71 f0       	breq	.+28     	; 0x476 <__fp_splitA+0x1a>
 45a:	47 95       	ror	r20

0000045c <__fp_splitA>:
 45c:	88 0f       	add	r24, r24
 45e:	97 fb       	bst	r25, 7
 460:	99 1f       	adc	r25, r25
 462:	61 f0       	breq	.+24     	; 0x47c <__fp_splitA+0x20>
 464:	9f 3f       	cpi	r25, 0xFF	; 255
 466:	79 f0       	breq	.+30     	; 0x486 <__fp_splitA+0x2a>
 468:	87 95       	ror	r24
 46a:	08 95       	ret
 46c:	12 16       	cp	r1, r18
 46e:	13 06       	cpc	r1, r19
 470:	14 06       	cpc	r1, r20
 472:	55 1f       	adc	r21, r21
 474:	f2 cf       	rjmp	.-28     	; 0x45a <__fp_split3+0xe>
 476:	46 95       	lsr	r20
 478:	f1 df       	rcall	.-30     	; 0x45c <__fp_splitA>
 47a:	08 c0       	rjmp	.+16     	; 0x48c <__fp_splitA+0x30>
 47c:	16 16       	cp	r1, r22
 47e:	17 06       	cpc	r1, r23
 480:	18 06       	cpc	r1, r24
 482:	99 1f       	adc	r25, r25
 484:	f1 cf       	rjmp	.-30     	; 0x468 <__fp_splitA+0xc>
 486:	86 95       	lsr	r24
 488:	71 05       	cpc	r23, r1
 48a:	61 05       	cpc	r22, r1
 48c:	08 94       	sec
 48e:	08 95       	ret

00000490 <__fp_zero>:
 490:	e8 94       	clt

00000492 <__fp_szero>:
 492:	bb 27       	eor	r27, r27
 494:	66 27       	eor	r22, r22
 496:	77 27       	eor	r23, r23
 498:	cb 01       	movw	r24, r22
 49a:	97 f9       	bld	r25, 7
 49c:	08 95       	ret

0000049e <__gesf2>:
 49e:	0e 94 02 02 	call	0x404	; 0x404 <__fp_cmp>
 4a2:	08 f4       	brcc	.+2      	; 0x4a6 <__gesf2+0x8>
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	08 95       	ret

000004a8 <__mulsf3>:
 4a8:	0e 94 67 02 	call	0x4ce	; 0x4ce <__mulsf3x>
 4ac:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_round>
 4b0:	0e 94 ca 02 	call	0x594	; 0x594 <__fp_pscA>
 4b4:	38 f0       	brcs	.+14     	; 0x4c4 <__mulsf3+0x1c>
 4b6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_pscB>
 4ba:	20 f0       	brcs	.+8      	; 0x4c4 <__mulsf3+0x1c>
 4bc:	95 23       	and	r25, r21
 4be:	11 f0       	breq	.+4      	; 0x4c4 <__mulsf3+0x1c>
 4c0:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_inf>
 4c4:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__fp_nan>
 4c8:	11 24       	eor	r1, r1
 4ca:	0c 94 49 02 	jmp	0x492	; 0x492 <__fp_szero>

000004ce <__mulsf3x>:
 4ce:	0e 94 26 02 	call	0x44c	; 0x44c <__fp_split3>
 4d2:	70 f3       	brcs	.-36     	; 0x4b0 <__mulsf3+0x8>

000004d4 <__mulsf3_pse>:
 4d4:	95 9f       	mul	r25, r21
 4d6:	c1 f3       	breq	.-16     	; 0x4c8 <__mulsf3+0x20>
 4d8:	95 0f       	add	r25, r21
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	55 1f       	adc	r21, r21
 4de:	62 9f       	mul	r22, r18
 4e0:	f0 01       	movw	r30, r0
 4e2:	72 9f       	mul	r23, r18
 4e4:	bb 27       	eor	r27, r27
 4e6:	f0 0d       	add	r31, r0
 4e8:	b1 1d       	adc	r27, r1
 4ea:	63 9f       	mul	r22, r19
 4ec:	aa 27       	eor	r26, r26
 4ee:	f0 0d       	add	r31, r0
 4f0:	b1 1d       	adc	r27, r1
 4f2:	aa 1f       	adc	r26, r26
 4f4:	64 9f       	mul	r22, r20
 4f6:	66 27       	eor	r22, r22
 4f8:	b0 0d       	add	r27, r0
 4fa:	a1 1d       	adc	r26, r1
 4fc:	66 1f       	adc	r22, r22
 4fe:	82 9f       	mul	r24, r18
 500:	22 27       	eor	r18, r18
 502:	b0 0d       	add	r27, r0
 504:	a1 1d       	adc	r26, r1
 506:	62 1f       	adc	r22, r18
 508:	73 9f       	mul	r23, r19
 50a:	b0 0d       	add	r27, r0
 50c:	a1 1d       	adc	r26, r1
 50e:	62 1f       	adc	r22, r18
 510:	83 9f       	mul	r24, r19
 512:	a0 0d       	add	r26, r0
 514:	61 1d       	adc	r22, r1
 516:	22 1f       	adc	r18, r18
 518:	74 9f       	mul	r23, r20
 51a:	33 27       	eor	r19, r19
 51c:	a0 0d       	add	r26, r0
 51e:	61 1d       	adc	r22, r1
 520:	23 1f       	adc	r18, r19
 522:	84 9f       	mul	r24, r20
 524:	60 0d       	add	r22, r0
 526:	21 1d       	adc	r18, r1
 528:	82 2f       	mov	r24, r18
 52a:	76 2f       	mov	r23, r22
 52c:	6a 2f       	mov	r22, r26
 52e:	11 24       	eor	r1, r1
 530:	9f 57       	subi	r25, 0x7F	; 127
 532:	50 40       	sbci	r21, 0x00	; 0
 534:	9a f0       	brmi	.+38     	; 0x55c <__mulsf3_pse+0x88>
 536:	f1 f0       	breq	.+60     	; 0x574 <__mulsf3_pse+0xa0>
 538:	88 23       	and	r24, r24
 53a:	4a f0       	brmi	.+18     	; 0x54e <__mulsf3_pse+0x7a>
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	bb 1f       	adc	r27, r27
 542:	66 1f       	adc	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	91 50       	subi	r25, 0x01	; 1
 54a:	50 40       	sbci	r21, 0x00	; 0
 54c:	a9 f7       	brne	.-22     	; 0x538 <__mulsf3_pse+0x64>
 54e:	9e 3f       	cpi	r25, 0xFE	; 254
 550:	51 05       	cpc	r21, r1
 552:	80 f0       	brcs	.+32     	; 0x574 <__mulsf3_pse+0xa0>
 554:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_inf>
 558:	0c 94 49 02 	jmp	0x492	; 0x492 <__fp_szero>
 55c:	5f 3f       	cpi	r21, 0xFF	; 255
 55e:	e4 f3       	brlt	.-8      	; 0x558 <__mulsf3_pse+0x84>
 560:	98 3e       	cpi	r25, 0xE8	; 232
 562:	d4 f3       	brlt	.-12     	; 0x558 <__mulsf3_pse+0x84>
 564:	86 95       	lsr	r24
 566:	77 95       	ror	r23
 568:	67 95       	ror	r22
 56a:	b7 95       	ror	r27
 56c:	f7 95       	ror	r31
 56e:	e7 95       	ror	r30
 570:	9f 5f       	subi	r25, 0xFF	; 255
 572:	c1 f7       	brne	.-16     	; 0x564 <__mulsf3_pse+0x90>
 574:	fe 2b       	or	r31, r30
 576:	88 0f       	add	r24, r24
 578:	91 1d       	adc	r25, r1
 57a:	96 95       	lsr	r25
 57c:	87 95       	ror	r24
 57e:	97 f9       	bld	r25, 7
 580:	08 95       	ret

00000582 <__fp_inf>:
 582:	97 f9       	bld	r25, 7
 584:	9f 67       	ori	r25, 0x7F	; 127
 586:	80 e8       	ldi	r24, 0x80	; 128
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	08 95       	ret

0000058e <__fp_nan>:
 58e:	9f ef       	ldi	r25, 0xFF	; 255
 590:	80 ec       	ldi	r24, 0xC0	; 192
 592:	08 95       	ret

00000594 <__fp_pscA>:
 594:	00 24       	eor	r0, r0
 596:	0a 94       	dec	r0
 598:	16 16       	cp	r1, r22
 59a:	17 06       	cpc	r1, r23
 59c:	18 06       	cpc	r1, r24
 59e:	09 06       	cpc	r0, r25
 5a0:	08 95       	ret

000005a2 <__fp_pscB>:
 5a2:	00 24       	eor	r0, r0
 5a4:	0a 94       	dec	r0
 5a6:	12 16       	cp	r1, r18
 5a8:	13 06       	cpc	r1, r19
 5aa:	14 06       	cpc	r1, r20
 5ac:	05 06       	cpc	r0, r21
 5ae:	08 95       	ret

000005b0 <__fp_round>:
 5b0:	09 2e       	mov	r0, r25
 5b2:	03 94       	inc	r0
 5b4:	00 0c       	add	r0, r0
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__fp_round+0xc>
 5b8:	88 23       	and	r24, r24
 5ba:	52 f0       	brmi	.+20     	; 0x5d0 <__fp_round+0x20>
 5bc:	bb 0f       	add	r27, r27
 5be:	40 f4       	brcc	.+16     	; 0x5d0 <__fp_round+0x20>
 5c0:	bf 2b       	or	r27, r31
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <__fp_round+0x18>
 5c4:	60 ff       	sbrs	r22, 0
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__fp_round+0x20>
 5c8:	6f 5f       	subi	r22, 0xFF	; 255
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <eeprom_read_word>:
 5d2:	a8 e1       	ldi	r26, 0x18	; 24
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	42 e0       	ldi	r20, 0x02	; 2
 5d8:	50 e0       	ldi	r21, 0x00	; 0
 5da:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <eeprom_read_blraw>

000005de <eeprom_write_word>:
 5de:	0e 94 04 03 	call	0x608	; 0x608 <eeprom_write_byte>
 5e2:	27 2f       	mov	r18, r23
 5e4:	0c 94 05 03 	jmp	0x60a	; 0x60a <eeprom_write_r18>

000005e8 <eeprom_read_block>:
 5e8:	dc 01       	movw	r26, r24
 5ea:	cb 01       	movw	r24, r22

000005ec <eeprom_read_blraw>:
 5ec:	fc 01       	movw	r30, r24
 5ee:	f9 99       	sbic	0x1f, 1	; 31
 5f0:	fe cf       	rjmp	.-4      	; 0x5ee <eeprom_read_blraw+0x2>
 5f2:	06 c0       	rjmp	.+12     	; 0x600 <eeprom_read_blraw+0x14>
 5f4:	f2 bd       	out	0x22, r31	; 34
 5f6:	e1 bd       	out	0x21, r30	; 33
 5f8:	f8 9a       	sbi	0x1f, 0	; 31
 5fa:	31 96       	adiw	r30, 0x01	; 1
 5fc:	00 b4       	in	r0, 0x20	; 32
 5fe:	0d 92       	st	X+, r0
 600:	41 50       	subi	r20, 0x01	; 1
 602:	50 40       	sbci	r21, 0x00	; 0
 604:	b8 f7       	brcc	.-18     	; 0x5f4 <eeprom_read_blraw+0x8>
 606:	08 95       	ret

00000608 <eeprom_write_byte>:
 608:	26 2f       	mov	r18, r22

0000060a <eeprom_write_r18>:
 60a:	f9 99       	sbic	0x1f, 1	; 31
 60c:	fe cf       	rjmp	.-4      	; 0x60a <eeprom_write_r18>
 60e:	1f ba       	out	0x1f, r1	; 31
 610:	92 bd       	out	0x22, r25	; 34
 612:	81 bd       	out	0x21, r24	; 33
 614:	20 bd       	out	0x20, r18	; 32
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	fa 9a       	sbi	0x1f, 2	; 31
 61c:	f9 9a       	sbi	0x1f, 1	; 31
 61e:	0f be       	out	0x3f, r0	; 63
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
